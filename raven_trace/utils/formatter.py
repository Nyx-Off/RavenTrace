#!/usr/bin/env python3
"""
Formatter - Formatage avanc√© des r√©sultats
"""

import logging
import sys
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from typing import Dict, Any
import json

console = Console()

def setup_logging():
    """Configurer le logging"""
    log_dir = Path.home() / '.raven_trace' / 'logs'
    log_dir.mkdir(parents=True, exist_ok=True)
    
    log_file = log_dir / 'raven_trace.log'
    
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    
    return logging.getLogger(__name__)

def format_email_results(results: Dict[str, Any]) -> str:
    """Formater les r√©sultats d'email pour affichage"""
    
    if 'error' in results:
        return f"[bold red]‚ùå Erreur: {results['error']}[/bold red]"
    
    output = ""
    output += f"\n[bold cyan]üìß Email: {results['email']}[/bold cyan]\n"
    
    # Confiance
    if 'confidence' in results:
        confidence = results['confidence']
        bar = "‚ñà" * int(confidence / 10) + "‚ñë" * (10 - int(confidence / 10))
        output += f"[cyan]Confiance: [{bar}] {confidence}%[/cyan]\n\n"
    
    # R√©putation
    if results.get('reputation'):
        output += "[bold]üîç R√©putation (EmailRep.io):[/bold]\n"
        rep = results['reputation'].get('emailrep', {})
        if rep:
            output += f"  ‚Ä¢ Score: {rep.get('reputation', 'N/A')}\n"
            output += f"  ‚Ä¢ R√©f√©rences: {rep.get('references', 0)}\n"
            if rep.get('details'):
                output += f"  ‚Ä¢ Domaine valide: {rep['details'].get('domain_exists', False)}\n"
                output += f"  ‚Ä¢ Blacklist√©: {rep['details'].get('blacklisted', False)}\n"
        output += "\n"
    
    # DNS
    if results.get('dns'):
        dns = results['dns'].get('dns', {})
        if dns:
            output += "[bold]üîê Configuration DNS:[/bold]\n"
            output += f"  ‚Ä¢ Domaine: {dns.get('domain', 'N/A')}\n"
            output += f"  ‚Ä¢ MX Records: {len(dns.get('mx_records', []))} trouv√©s\n"
            output += f"  ‚Ä¢ SPF Configur√©: {'‚úì' if dns.get('spf_configured') else '‚úó'}\n"
            output += f"  ‚Ä¢ DMARC Configur√©: {'‚úì' if dns.get('dmarc_configured') else '‚úó'}\n"
            output += f"  ‚Ä¢ Domaine Valide: {'‚úì' if dns.get('valid_domain') else '‚úó'}\n"
        output += "\n"
    
    # Fuites
    if results.get('breaches'):
        breaches = results['breaches']
        if breaches and breaches[0].get('status') != 'clean':
            output += "[bold red]‚ö†Ô∏è  FUITES DE DONN√âES D√âTECT√âES:[/bold red]\n"
            for breach in breaches:
                if breach.get('breach_name'):
                    severity = breach.get('severity', 'CRITIQUE')
                    output += f"  ‚Ä¢ [red]{breach['breach_name']}[/red] ({breach.get('date', 'N/A')}) - {severity}\n"
                    if breach.get('data_classes'):
                        output += f"    Types: {', '.join(breach['data_classes'][:3])}\n"
        else:
            output += "[bold green]‚úì Aucune fuite de donn√©es d√©tect√©e (EmailRep.io)[/bold green]\n"
        output += "\n"
    
    # Profils sociaux
    if results.get('social_profiles'):
        social = results['social_profiles']
        if social:
            output += "[bold]üë• Profils Sociaux:[/bold]\n"
            for profile in social:
                output += f"  ‚Ä¢ {profile.get('platform', 'N/A')}\n"
        output += "\n"
    
    return output

def format_username_results(results: Dict[str, Any]) -> str:
    """Formater les r√©sultats d'username pour affichage"""
    
    if 'error' in results:
        return f"[bold red]‚ùå Erreur: {results['error']}[/bold red]"
    
    output = ""
    output += f"\n[bold cyan]üë§ Username: {results['username']}[/bold cyan]\n"
    
    # Confiance
    if 'confidence' in results:
        confidence = results['confidence']
        bar = "‚ñà" * int(confidence / 10) + "‚ñë" * (10 - int(confidence / 10))
        output += f"[cyan]Confiance: [{bar}] {confidence}%[/cyan]\n"
    
    # Profils trouv√©s
    if 'profiles_found' in results:
        output += f"[bold]Profils trouv√©s: {results['profiles_found']}[/bold]\n\n"
    
    # R√©seaux sociaux
    if results.get('social_media'):
        found = [p for p in results['social_media'] if p.get('found')]
        if found:
            output += "[bold]üì± R√©seaux Sociaux:[/bold]\n"
            for profile in found:
                output += f"  [green]‚úì {profile.get('platform')}[/green]: {profile.get('url', 'N/A')}\n"
            output += "\n"
    
    # GitHub
    if results.get('code_repositories'):
        github = [r for r in results['code_repositories'] if r.get('platform') == 'github']
        if github:
            g = github[0]
            output += "[bold]üíª GitHub:[/bold]\n"
            output += f"  ‚Ä¢ Nom: {g.get('name', 'N/A')}\n"
            output += f"  ‚Ä¢ Bio: {g.get('bio', 'N/A')}\n"
            output += f"  ‚Ä¢ Followers: {g.get('followers', 0)}\n"
            output += f"  ‚Ä¢ Repos publics: {g.get('public_repos', 0)}\n"
            if g.get('company'):
                output += f"  ‚Ä¢ Entreprise: {g['company']}\n"
            if g.get('location'):
                output += f"  ‚Ä¢ Location: {g['location']}\n"
            output += "\n"
    
    # Reddit
    if results.get('code_repositories'):
        reddit = [r for r in results['code_repositories'] if r.get('platform') == 'reddit']
        if reddit:
            r = reddit[0]
            output += "[bold]üî¥ Reddit:[/bold]\n"
            output += f"  ‚Ä¢ Nom: {r.get('display_name', 'N/A')}\n"
            output += f"  ‚Ä¢ Link Karma: {r.get('link_karma', 0)}\n"
            output += f"  ‚Ä¢ Comment Karma: {r.get('comment_karma', 0)}\n"
            output += f"  ‚Ä¢ Gold: {'‚úì' if r.get('is_gold') else '‚úó'}\n"
            output += f"  ‚Ä¢ Mod√©rateur: {'‚úì' if r.get('is_mod') else '‚úó'}\n"
            output += "\n"
    
    # Forums
    if results.get('forums'):
        found = [f for f in results['forums'] if f.get('found')]
        if found:
            output += "[bold]üìù Forums:[/bold]\n"
            for forum in found:
                output += f"  ‚Ä¢ {forum.get('platform', 'N/A')}\n"
            output += "\n"
    
    return output

def display_results_table(results: Dict[str, Any]) -> None:
    """Afficher les r√©sultats en table format√©e"""
    
    if 'email' in results:
        display_results_email_table(results)
    elif 'username' in results:
        display_results_username_table(results)

def display_results_email_table(results: Dict[str, Any]) -> None:
    """Table pour email"""
    table = Table(title="R√©sultats Email OSINT", show_header=True, header_style="bold magenta")
    table.add_column("Cat√©gorie", style="cyan")
    table.add_column("Information", style="green")
    
    # R√©putation
    rep = results.get('reputation', {}).get('emailrep', {})
    if rep:
        table.add_row("R√©putation", f"Score: {rep.get('reputation', 'N/A')}")
    
    # DNS
    dns = results.get('dns', {}).get('dns', {})
    if dns:
        table.add_row("DNS", f"MX: {len(dns.get('mx_records', []))} | SPF: {'‚úì' if dns.get('spf_configured') else '‚úó'}")
    
    # Fuites
    breaches = results.get('breaches', [])
    if breaches and breaches[0].get('status') != 'clean':
        table.add_row("Fuites", f"‚ö†Ô∏è  {len(breaches)} fuite(s) d√©tect√©e(s)")
    else:
        table.add_row("Fuites", "‚úì Aucune")
    
    # Profils
    profiles = results.get('social_profiles', [])
    table.add_row("Profils Sociaux", f"{len(profiles)} trouv√©(s)")
    
    console.print(table)

def display_results_username_table(results: Dict[str, Any]) -> None:
    """Table pour username"""
    table = Table(title="R√©sultats Username OSINT", show_header=True, header_style="bold magenta")
    table.add_column("Plateforme", style="cyan")
    table.add_column("Statut", style="green")
    
    # R√©seaux sociaux
    for platform in results.get('social_media', []):
        status = "‚úì Trouv√©" if platform.get('found') else "‚úó"
        table.add_row(platform.get('platform', 'N/A'), status)
    
    console.print(table)

def export_json(results: Dict[str, Any], filepath: str) -> None:
    """Exporter en JSON"""
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    console.print(f"[green]‚úì R√©sultats export√©s: {filepath}[/green]")

def export_csv(results: Dict[str, Any], filepath: str) -> None:
    """Exporter en CSV"""
    import csv
    
    with open(filepath, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['Cl√©', 'Valeur'])
        
        def flatten(d, parent_key=''):
            for k, v in d.items():
                new_key = f"{parent_key}.{k}" if parent_key else k
                if isinstance(v, dict):
                    yield from flatten(v, new_key)
                elif isinstance(v, list):
                    yield (new_key, json.dumps(v))
                else:
                    yield (new_key, str(v))
        
        for key, value in flatten(results):
            writer.writerow([key, value])
    
    console.print(f"[green]‚úì R√©sultats export√©s: {filepath}[/green]")